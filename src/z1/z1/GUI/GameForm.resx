<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        H/9/+B//f/gf/3/8H/9//j//f////3////8=
</value>
  </data>
</root>